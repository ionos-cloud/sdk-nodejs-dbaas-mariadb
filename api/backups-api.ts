/* tslint:disable */
/* eslint-disable */
/**
 * IONOS DBaaS MariaDB REST API
 * An enterprise-grade Database is provided as a Service (DBaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.  The API allows you to create additional MariaDB database clusters or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration, DEFAULT_MAX_RETRIES, DEFAULT_MAX_WAIT_TIME } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, backOff, runRequest } from '../base';
// @ts-ignore
import { BackupList } from '../model';
// @ts-ignore
import { BackupResponse } from '../model';
// @ts-ignore
import { InlineResponse400 } from '../model';
// @ts-ignore
import { InlineResponse401 } from '../model';
// @ts-ignore
import { InlineResponse403 } from '../model';
// @ts-ignore
import { InlineResponse404 } from '../model';
// @ts-ignore
import { InlineResponse405 } from '../model';
// @ts-ignore
import { InlineResponse415 } from '../model';
// @ts-ignore
import { InlineResponse422 } from '../model';
// @ts-ignore
import { InlineResponse429 } from '../model';
// @ts-ignore
import { InlineResponse500 } from '../model';
// @ts-ignore
import { InlineResponse503 } from '../model';
/**
 * BackupsApi - axios parameter creator
 * @export
 */
export const BackupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a MariaDB cluster\'s backups by using its ID. This value can be found when you GET the list of MariaDB cluster backups. 
         * @summary Fetch a cluster\'s backups
         * @param {string} backupId The unique ID of the backup.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backupsFindById: async (backupId: string, options: any = {}): Promise<RequestArgs> => {
            if (backupId === null || backupId === undefined) {
                throw new RequiredError('backupId','Required parameter backupId was null or undefined when calling backupsFindById.');
            }
            const localVarPath = `/backups/{backupId}`
                .replace(`{${"backupId"}}`, encodeURIComponent(String(backupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all lists of backups for all MariaDB clusters in this contract. 
         * @summary List of cluster\'s backups.
         * @param {number} [limit] The maximum number of elements to return. Use together with \&#39;offset\&#39; for pagination.
         * @param {number} [offset] The first element to return. Use together with \&#39;limit\&#39; for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backupsGet: async (limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/backups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((limit === undefined) && (configuration !== undefined)) {
                limit = configuration.getDefaultParamValue('limit');
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if ((offset === undefined) && (configuration !== undefined)) {
                offset = configuration.getDefaultParamValue('offset');
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all backups of the given MariaDB cluster. 
         * @summary List backups of cluster
         * @param {string} clusterId The unique ID of the cluster.
         * @param {number} [limit] The maximum number of elements to return. Use together with \&#39;offset\&#39; for pagination.
         * @param {number} [offset] The first element to return. Use together with \&#39;limit\&#39; for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterBackupsGet: async (clusterId: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            if (clusterId === null || clusterId === undefined) {
                throw new RequiredError('clusterId','Required parameter clusterId was null or undefined when calling clusterBackupsGet.');
            }
            const localVarPath = `/clusters/{clusterId}/backups`
                .replace(`{${"clusterId"}}`, encodeURIComponent(String(clusterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((limit === undefined) && (configuration !== undefined)) {
                limit = configuration.getDefaultParamValue('limit');
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if ((offset === undefined) && (configuration !== undefined)) {
                offset = configuration.getDefaultParamValue('offset');
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BackupsApi - functional programming interface
 * @export
 */
export const BackupsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieve a MariaDB cluster\'s backups by using its ID. This value can be found when you GET the list of MariaDB cluster backups. 
         * @summary Fetch a cluster\'s backups
         * @param {string} backupId The unique ID of the backup.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async backupsFindById(backupId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BackupResponse>> {
            const axiosArgs = await BackupsApiAxiosParamCreator(configuration).backupsFindById(backupId, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieves all lists of backups for all MariaDB clusters in this contract. 
         * @summary List of cluster\'s backups.
         * @param {number} [limit] The maximum number of elements to return. Use together with \&#39;offset\&#39; for pagination.
         * @param {number} [offset] The first element to return. Use together with \&#39;limit\&#39; for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async backupsGet(limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BackupList>> {
            const axiosArgs = await BackupsApiAxiosParamCreator(configuration).backupsGet(limit, offset, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Retrieves a list of all backups of the given MariaDB cluster. 
         * @summary List backups of cluster
         * @param {string} clusterId The unique ID of the cluster.
         * @param {number} [limit] The maximum number of elements to return. Use together with \&#39;offset\&#39; for pagination.
         * @param {number} [offset] The first element to return. Use together with \&#39;limit\&#39; for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clusterBackupsGet(clusterId: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BackupList>> {
            const axiosArgs = await BackupsApiAxiosParamCreator(configuration).clusterBackupsGet(clusterId, limit, offset, options);
            return runRequest(axiosArgs, configuration);
        },
    }
};

/**
 * BackupsApi - factory interface
 * @export
 */
export const BackupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieve a MariaDB cluster\'s backups by using its ID. This value can be found when you GET the list of MariaDB cluster backups. 
         * @summary Fetch a cluster\'s backups
         * @param {string} backupId The unique ID of the backup.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backupsFindById(backupId: string, options?: any): AxiosPromise<BackupResponse> {
            return BackupsApiFp(configuration).backupsFindById(backupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all lists of backups for all MariaDB clusters in this contract. 
         * @summary List of cluster\'s backups.
         * @param {number} [limit] The maximum number of elements to return. Use together with \&#39;offset\&#39; for pagination.
         * @param {number} [offset] The first element to return. Use together with \&#39;limit\&#39; for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backupsGet(limit?: number, offset?: number, options?: any): AxiosPromise<BackupList> {
            return BackupsApiFp(configuration).backupsGet(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all backups of the given MariaDB cluster. 
         * @summary List backups of cluster
         * @param {string} clusterId The unique ID of the cluster.
         * @param {number} [limit] The maximum number of elements to return. Use together with \&#39;offset\&#39; for pagination.
         * @param {number} [offset] The first element to return. Use together with \&#39;limit\&#39; for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterBackupsGet(clusterId: string, limit?: number, offset?: number, options?: any): AxiosPromise<BackupList> {
            return BackupsApiFp(configuration).clusterBackupsGet(clusterId, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for backupsFindById operation in BackupsApi.
 * @export
 * @interface BackupsApiBackupsFindByIdRequest
 */
export interface BackupsApiBackupsFindByIdRequest {
    /**
     * The unique ID of the backup.
     * @type {string}
     * @memberof BackupsApiBackupsFindById
     */
    readonly backupId: string
}

/**
 * Request parameters for backupsGet operation in BackupsApi.
 * @export
 * @interface BackupsApiBackupsGetRequest
 */
export interface BackupsApiBackupsGetRequest {
    /**
     * The maximum number of elements to return. Use together with \&#39;offset\&#39; for pagination.
     * @type {number}
     * @memberof BackupsApiBackupsGet
     */
    readonly limit?: number

    /**
     * The first element to return. Use together with \&#39;limit\&#39; for pagination.
     * @type {number}
     * @memberof BackupsApiBackupsGet
     */
    readonly offset?: number
}

/**
 * Request parameters for clusterBackupsGet operation in BackupsApi.
 * @export
 * @interface BackupsApiClusterBackupsGetRequest
 */
export interface BackupsApiClusterBackupsGetRequest {
    /**
     * The unique ID of the cluster.
     * @type {string}
     * @memberof BackupsApiClusterBackupsGet
     */
    readonly clusterId: string

    /**
     * The maximum number of elements to return. Use together with \&#39;offset\&#39; for pagination.
     * @type {number}
     * @memberof BackupsApiClusterBackupsGet
     */
    readonly limit?: number

    /**
     * The first element to return. Use together with \&#39;limit\&#39; for pagination.
     * @type {number}
     * @memberof BackupsApiClusterBackupsGet
     */
    readonly offset?: number
}

/**
 * BackupsApi - object-oriented interface
 * @export
 * @class BackupsApi
 * @extends {BaseAPI}
 */
export class BackupsApi extends BaseAPI {
    /**
     * Retrieve a MariaDB cluster\'s backups by using its ID. This value can be found when you GET the list of MariaDB cluster backups. 
     * @summary Fetch a cluster\'s backups
     * @param {BackupsApiBackupsFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackupsApi
     */
    public backupsFindById(requestParameters: BackupsApiBackupsFindByIdRequest, options?: any) {
        return BackupsApiFp(this.configuration).backupsFindById(requestParameters.backupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all lists of backups for all MariaDB clusters in this contract. 
     * @summary List of cluster\'s backups.
     * @param {BackupsApiBackupsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackupsApi
     */
    public backupsGet(requestParameters: BackupsApiBackupsGetRequest = {}, options?: any) {
        return BackupsApiFp(this.configuration).backupsGet(requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of all backups of the given MariaDB cluster. 
     * @summary List backups of cluster
     * @param {BackupsApiClusterBackupsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackupsApi
     */
    public clusterBackupsGet(requestParameters: BackupsApiClusterBackupsGetRequest, options?: any) {
        return BackupsApiFp(this.configuration).clusterBackupsGet(requestParameters.clusterId, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }
}
